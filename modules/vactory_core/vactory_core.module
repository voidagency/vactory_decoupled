<?php

/**
 * @file
 * Contain related hooks.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Drupal\core\Site\Settings;

/**
 * Implements hook_entity_type_build().
 */
function vactory_core_entity_type_build(array &$entity_types) {
  if (isset($entity_types['paragraph'])) {
    $entity_types['paragraph']->setClass('Drupal\vactory_core\Entity\VactoryParagraph');
  }
}

/**
 * Implements hook_mail_alter().
 */
function vactory_core_mail_alter(&$message) {
  switch ($message['key']) {
    case 'page_mail':
    case 'page_copy':
    case 'cancel_confirm':
    case 'password_reset':
    case 'register_admin_created':
    case 'register_no_approval_required':
    case 'register_pending_approval':
    case 'register_pending_approval_admin':
    case 'status_activated':
    case 'status_blocked':
    case 'status_canceled':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      foreach ($message['body'] as $key => $body) {
        $message['body'][$key] = new FormattableMarkup($body, []);
      }
      break;

  }

  // Redirect all site mails (except reset password mail),
  // When vactory_mail_redirect is defined.
  $route_name = Drupal::routeMatch()->getRouteName();
  $mail_redirect = Settings::get('vactory_mail_redirect', FALSE);
  if ($mail_redirect && !empty($mail_redirect) && $route_name !== 'user.pass') {
    $mail_dist = str_replace(',', ' ', $message['to']);
    $prefix = t('Destination addresse(s)');
    $to = $prefix . ': ' . $mail_dist;
    $message['to'] = $to . '<' . $mail_redirect . '>';
  }
}

/**
 * Implements hook_token_info().
 */
function vactory_core_token_info() {

  $types['vactory'] = [
    'name'        => t('Vactory'),
    'description' => t('Vactory custom token type'),
  ];
  $tokens['site_logo'] = [
    'name'        => t('Site logo'),
    'description' => t('The logo of the site.'),
  ];

  $tokens['frontend_url'] = [
    'name'        => t("Frontend URL"),
    'description' => t('URL to Frontend'),
  ];

  $tokens['node_summary'] = [
    'name'        => t('Node summary'),
    'description' => t('The description of the current page.'),
  ];

  $tokens['node_path'] = [
    'name'        => t('Node path'),
    'description' => t('The path of the current page.'),
  ];

  return [
    'types'  => $types,
    'tokens' => [
      'vactory' => $tokens,
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function vactory_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'vactory') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'site_logo':
          $theme_name = \Drupal::service('theme.manager')
            ->getActiveTheme()
            ->getName();
          $replacements[$original] = file_create_url(substr(theme_get_setting('logo.url', $theme_name), 1));
          break;

        case 'node_summary':
          $value = (isset($data['node']) && $data['node']->get('node_summary')->first() && isset($data['node']->get('node_summary')->first()->getValue()['value'])) ? $data['node']->get('node_summary')->first()->getValue()['value'] : '';
          $replacements[$original] = $value;
          break;

        case 'node_path':
          $value = (isset($data['node']) && isset($data['node']->get('nid')->value)) ? \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $data['node']->get('nid')->value, $data['node']->language()->getId()) : '';
          $replacements[$original] = $data['node']->language()->getId() . $value;
          break;

        case 'frontend_url':
          $replacements[$original] = Settings::get('BASE_FRONTEND_URL');
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_form_alter().
 */
function vactory_core_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Node type form.
  if ($form_id == 'node_type_edit_form' || $form_id == 'node_type_add_form') {
    unset($form['workflow']['options']['#default_value']['promote']);
    unset($form['workflow']['options']['#default_value']['sticky']);
    $form['display']['display_submitted']['#default_value'] = FALSE;
  }

}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function vactory_core_form_node_form_alter(&$form, FormStateInterface $form_state) {
  unset($form['promote']);
  unset($form['sticky']);

  if (isset($form['revision'])) {
    $form['revision']['#default_value'] = TRUE;
    $form['revision']['#access'] = FALSE;
  }

  // Node CSS class.
  $form['node_class_group'] = [
    '#type'        => 'details',
    '#title'       => t('CSS Class settings'),
    '#description' => t('Assign CSS classes to the node.'),
    '#group'       => 'advanced',
    '#open'        => FALSE,
    '#access'      => \Drupal::currentUser()
      ->hasPermission('administer field css class'),
    '#attributes'  => ['class' => ['node-class-form']],
  ];
  $form['node_class']['#group'] = 'node_class_group';
  $form['node_body_class']['#group'] = 'node_class_group';

  // Path field.
  if (isset($form['path']['widget'][0])) {
    $form['path']['widget'][0]['#open'] = FALSE;
  }

  // Node Settings.
  if (isset($form['node_settings'])) {
    $form['node_settings_group'] = [
      '#type'        => 'details',
      '#title'       => t('Node settings'),
      '#group'       => 'advanced',
      '#open'        => FALSE,
      '#access'      => \Drupal::currentUser()
        ->hasPermission('administer field node settings'),
      '#attributes'  => ['class' => ['node-settings-form']],
    ];
    $form['node_settings']['#group'] = 'node_settings_group';
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_core_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'node') {

    $fields['node_class'] = BaseFieldDefinition::create('string')
      ->setLabel(t('CSS class(es)'))
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 35,
      ])
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE);

    $fields['node_summary'] = BaseFieldDefinition::create('string_long')
      ->setLabel(t('Page description'))
      ->setDescription(t('Briefly describe your page.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDefaultValue('')
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type'     => 'string_textarea',
        'weight'   => 1,
        'settings' => [
          'rows' => 4,
        ],
      ])
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);

    $fields['node_settings'] = BaseFieldDefinition::create('string_long')
      ->setLabel(t('Node Settings'))
      ->setDescription(t('Add extra parameters in JSON Format : { "isHomePage": true, "taxonomy": 4, "limit": 6 }'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDefaultValue('')
      ->setRequired(FALSE)
      ->setDisplayOptions('form', [
        'type'     => 'string_textarea',
        'weight'   => 1,
        'settings' => [
          'rows' => 4,
        ],
      ])
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);

    $fields['node_body_class'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Body CSS class(es)'))
      ->setDescription(t('Enter a set of classes (<b>separated with spaces</b>) to add it to body class attribute.'))
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 36,
      ])
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE);
  }

  if ($entity_type->id() === 'block_content') {
    $fields['block_machine_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Machine Name'))
      ->setRequired(TRUE)
      ->setTranslatable(FALSE)
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->addConstraint('UniqueField', []);
  }

  if ($entity_type->id() === 'paragraph') {

    $fields['paragraph_identifier'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Paragraph ID'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'     => 'string_textfield',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight'   => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    // @See vactory_paragraphs/templates/paragraph--vactory-paragraph-block.html.twig
    $fields['paragraph_container'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Width'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setRequired(TRUE)
      ->setDefaultValue('narrow_width')
      ->setSetting('allowed_values', [
        'full_width'   => 'Full Width',
        'narrow_width' => 'Narrow Width',
        'no_container' => 'No Container',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'options_select',
        'weight' => -10,
      ]);

    $fields['paragraph_css_class'] = BaseFieldDefinition::create('string')
      ->setLabel(t('CSS class(es)'))
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 35,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setTranslatable(TRUE);

    $fields['paragraph_background_image'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Image'))
      ->setDescription(t('Set a background image.'))
      ->setSetting('target_type', 'media')
      ->setSetting('handler_settings', ['target_bundles' => ['image' => 'image']])
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'media_library_widget',
        'weight' => 45,
      ]);

    $fields['paragraph_background_color'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Color'))
      ->setDescription(t('Set a background color.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 45,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['paragraph_section'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Header State'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'     => 'string_textfield',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight'   => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_page_attachments().
 */
function vactory_core_page_attachments(array &$page) {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();
  $front_theme = \Drupal::config('system.theme')->get('default');
  if ($active_theme->getName() != $front_theme) {
    $page['#attached']['library'][] = 'vactory_core/ckeditor_config';
  }
}
