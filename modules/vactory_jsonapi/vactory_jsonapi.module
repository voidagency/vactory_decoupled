<?php

/**
 * @file
 * Primary module hooks for vactory_jsonapi module.
 */

use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;

use Drupal\Component\Utility\UrlHelper;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ServerException;
use Drupal\menu_item_extras\Entity\MenuItemExtrasMenuLinkContent;

/**
 * Implements hook_form_alter().
 */
function vactory_jsonapi_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if ($form_id === 'locale_translate_edit_form') {
    $form['#submit'][] = 'clear_next_cache_translation';
  }

  $form_object = $form_state->getFormObject();
  if (!($form_object instanceof ContentEntityFormInterface)) {
    return;
  }
  $entity = $form_object->getEntity();
  $op = $form_object->getOperation();

  if (!($entity instanceof ContentEntityInterface) || !($entity instanceof Node)) {
    return;
  }

  if (in_array($op, ['edit', 'add', 'default'], TRUE)) {
    unset($form['actions']['preview']);
  }

  $frontend_url = Settings::get('BASE_FRONTEND_URL', FALSE);
  if (!$frontend_url || empty($frontend_url)) {
    return;
  }

  $type = $form_state->getFormObject()->getEntity()->bundle();
  // @todo: make an interface for this.
  $disabledTypes = Settings::get('PREVIEW_DISABLED_TYPES', [
    'vactory_page_listing',
    'vactory_government_member',
    'vactory_banner'
  ]);

  if (in_array($type, $disabledTypes)) {
    return;
  }

  if ($op === 'edit') {
    // Add another option to go to the Gatsby page after saving.
    $form['actions']['save_view_gatsby'] = [
      '#type' => 'submit',
      '#value' => t('Save and view page'),
      '#submit' => ['::submitForm', '::save'],
      '#access' => TRUE,
      '#weight' => 20,
    ];

    // Add a submit handler to redirect to the Gatsby page.
    $form['actions']['save_view_gatsby']['#submit'][] = 'gatsby_node_form_submit';
  }
}

/**
 * Submit handler for viewing the Gatsby page.
 */
function gatsby_node_form_submit(&$form, FormStateInterface $form_state) {
  $path = $form_state->getValue('path');
  $url = !empty($path[0]['alias']) ? '/' .$path[0]['langcode'] . $path[0]['alias'] : $path[0]['source'];
  $nid = $form_state->getValue('nid');
  $siteConfig = \Drupal::config('system.site');
  $front_uri = $siteConfig->get('page.front');
  $frontend_url = Settings::get('BASE_FRONTEND_URL', FALSE);

  if ($front_uri === '/node/' . $nid) {
    $url = Url::fromRoute('<front>')->toString() ;
  }

  // Redirect to the alias if it exists, otherwise use the node URL.
  if (isset($url)) {
    $gatsby_url = Url::fromUri($frontend_url . $url . '/__preview')->toString();
    $response = new RedirectResponse($gatsby_url);
    $response->send();
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_jsonapi_entity_base_field_info(EntityTypeInterface $entity_type) {
  $base_table = $entity_type->getBaseTable();
  $canonical_template_exists = $entity_type->hasLinkTemplate('canonical');
  $fields = [];

  if (!empty($base_table) && $canonical_template_exists) {
    $fields['internal_user'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Internal User'))
      ->setDescription(t('User profile'))
      ->setTranslatable(FALSE)
      ->setClass('\Drupal\vactory_jsonapi\Plugin\Field\InternalUserEntityFieldItemList')
      ->setComputed(TRUE)
      ->setReadOnly(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }

  if ($entity_type->id() === 'comment') {
    $fields['extra_data'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Comment Extra Data'))
      ->setDescription(t('Comment Extra Data'))
      ->setTranslatable(FALSE)
      ->setClass('\Drupal\vactory_jsonapi\Plugin\Field\InternalCommentEntityFieldItemList')
      ->setComputed(TRUE)
      ->setReadOnly(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }

  if ($entity_type->id() === 'node') {
    $fields['internal_blocks'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Node Region Blocks'))
      ->setDescription(t('Defined blocks per node'))
      ->setTranslatable(FALSE)
      ->setClass('\Drupal\vactory_jsonapi\Plugin\Field\InternalNodeEntityBlocksFieldItemList')
      ->setComputed(TRUE)
      ->setReadOnly(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }

  if ($entity_type->id() === 'node') {
    $fields['internal_comment'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Node comment'))
      ->setDescription(t('Defined comment per node'))
      ->setTranslatable(FALSE)
      ->setClass('\Drupal\vactory_jsonapi\Plugin\Field\InternalNodeEntityCommentFieldItemList')
      ->setComputed(TRUE)
      ->setReadOnly(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);

    $fields['internal_extra'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Node extra'))
      ->setDescription(t('Extra data per node'))
      ->setTranslatable(FALSE)
      ->setClass('\Drupal\vactory_jsonapi\Plugin\Field\InternalNodeEntityExtraFieldItemList')
      ->setComputed(TRUE)
      ->setReadOnly(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }

  if ($entity_type->id() === 'node') {
    $fields['internal_breadcrumb'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Node breadcrumb'))
      ->setDescription(t('Defined breadcrumb per node'))
      ->setTranslatable(FALSE)
      ->setClass('\Drupal\vactory_jsonapi\Plugin\Field\InternalNodeEntityBreadcrumbFieldItemList')
      ->setComputed(TRUE)
      ->setReadOnly(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
//      ->setDisplayOptions('view', [
//        'label' => 'hidden',
//        'type' => 'hidden',
//        'weight' => 0,
//      ])
//      ->setDisplayOptions('form', ['type' => 'hidden'])
//      ->setDisplayConfigurable('form', TRUE)
//      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }

  if ($entity_type->id() === 'taxonomy_term') {
    $fields['slug'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Term slug'))
      ->setDescription(t('Term slug'))
      ->setTranslatable(FALSE)
      ->setClass('\Drupal\vactory_jsonapi\Plugin\Field\InternalTermEntitySlugFieldItemList')
      ->setComputed(TRUE)
      ->setReadOnly(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }

  return $fields;
}


/**
 * Implements hook_field_formatter_info_alter().
 *
 * Make sure the standard formatter for string can be used for the current
 * map internal_breadcrumb computed field. for debug.
 */
/*function vactory_jsonapi_field_formatter_info_alter(array &$info) {
  $info['text_default']['field_types'][] = 'map';
}*/

/**
 * Implements hook_entity_type_alter().
 *
 * @param array $entity_types
 */
function vactory_jsonapi_entity_type_alter(array &$entity_types) {
  $entity_types['comment']->addConstraint('jsonapi_recaptcha');
  $entity_types['node']->addConstraint('jsonapi_recaptcha');
}


/**
 * Implements hook_entity_update().
 * Clear drupal cache => clear frontend cache.
 */
function vactory_decoupled_cache_flush() {
  clear_next_cache();
}

function clear_next_cache_translation(&$form, FormStateInterface $form_state) {
  $query = [
    'invalidate'  => 'translations',
  ];
  clear_next_cache($query);
}

/**
 * Implements hook_entity_update().
 */
function vactory_decoupled_entity_update(EntityInterface $entity) {
  static $loaded;

  // @todo: do we need to keep going in this function ?
  // Updating a node will also update menu ?
  if ($entity instanceof Node && !$entity->isNew()) {
      $query = get_node_info($entity);
      clear_next_cache($query);
  }

  if ($entity instanceof MenuItemExtrasMenuLinkContent && !isset($loaded)) {
      $loaded = 1;
      clear_next_cache([
        'menu'       => $entity->bundle(),
        'invalidate' => 'menu',
      ]);
  }
  else if ($entity instanceof Drupal\system\Entity\Menu) {
    clear_next_cache([
      'menu'       => $entity->id(),
      'invalidate' => 'menu',
    ]);
  }
}


/**
 * Implements hook_entity_predelete().
 */
function vactory_decoupled_entity_predelete(EntityInterface $entity) {
  if ($entity instanceof Node) {
    $query = get_node_info($entity);
    clear_next_cache($query);
  }
}

function get_node_info($entity) {
  $nid = $entity->id();
  $langcode = $entity->language()->getId();
  // $alias = \Drupal::service('path_alias.manager')
  //   ->getAliasByPath('/node/' . $nid);
  // @todo: if no alias fall back to /node/id

  return $query = [
    'id'         => $nid,
    'langcode'   => $langcode,
    // 'alias'      => $alias,
    'invalidate' => 'node',
  ];
}

/**
 * Implements hook_entity_delete().
 */
function vactory_decoupled_entity_delete(EntityInterface $entity) {
  if ($entity instanceof MenuItemExtrasMenuLinkContent) {
    $query = [
      'menu'       => $entity->bundle(),
      'invalidate' => 'menu',
    ];
    clear_next_cache($query);
  }
}

/**
 * @param array $query
 * Clears frontend cache.
 *
 * @return bool
 */
function clear_next_cache($query = []) {

  $front_end_url = Settings::get('FRONTEND_URL');
  $cache_secret = Settings::get('FRONTEND_CACHE_KEY');

  if (!isset($front_end_url) || $front_end_url == '') {
    \Drupal::logger('clear_next_cache')
      ->error('FRONTEND_URL env variable is undefined');
    return FALSE;
  }

  if (!isset($cache_secret) || $cache_secret == '') {
    \Drupal::logger('clear_next_cache')
      ->error('FRONTEND_CACHE_KEY env variable is undefined');
    return FALSE;
  }

  $endpoint = '/api/cache/clear';

  $query_str = $query === [] ? '' : '?' . UrlHelper::buildQuery($query);

  $success_msg = $query == [] ? 'Next Cache Cleared' : 'Next Cache Cleared for ' . print_r($query, TRUE);
  $error_msg = $query == [] ? 'Cannot Clear Next Cache' : 'Cannot Clear Next Cache for ' . print_r($query, TRUE);

  $client = \Drupal::httpClient();

  try {
    $request = $client->get($front_end_url . $endpoint . $query_str, [
      "headers" => [
        "x-cache-secret" => $cache_secret,
      ],
    ]);

    if ($request->getStatusCode() == 200) {
      \Drupal::logger('clear_next_cache')->info($success_msg);
      return TRUE;
    }
    else {
      \Drupal::logger('clear_next_cache')->warning($error_msg);
      return FALSE;
    }

  } catch (ServerException $e) {
    \Drupal::logger('clear_next_cache')->warning('ServerException: '.$error_msg);
    return FALSE;
  } catch (RequestException $e) {
    dpm($e);
    \Drupal::logger('clear_next_cache')->warning('RequestException: '.$error_msg);
    return FALSE;
  }
}